/* -LICENSE-START-
** Copyright (c) 2012 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#include "BMDSwitcherAPI_h.h"
#include <vector>

class SwitcherMonitor;
class MediaPlayerMonitor;
class StillsMonitor;
class ClipMonitor;
class StillTransfer;
class ClipTransfer;

// CSwitcherMediaPoolDlg dialog
class CSwitcherMediaPoolDlg : public CDialog
{
	// Construction
public:
	CSwitcherMediaPoolDlg(CWnd* pParent = NULL);	// standard constructor
	~CSwitcherMediaPoolDlg();

	// Dialog Data
	enum { IDD = IDD_SwitcherMediaPool_DIALOG };

protected:
	virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV support

	// Implementation
protected:
	HICON m_hIcon;
	virtual BOOL OnInitDialog();
	DECLARE_MESSAGE_MAP()

public:
	// UI callbacks
	afx_msg void OnConnectButtonClicked();
	afx_msg void OnMediaPlayerSourceComboChanged();
	afx_msg void OnBeginButtonClicked();
	afx_msg void OnPreviousButtonClicked();
	afx_msg void OnPlayButtonClicked();
	afx_msg void OnNextButtonClicked();
	afx_msg void OnLoopButtonClicked();
	afx_msg void OnMediaPoolTargetComboChanged();
	afx_msg void OnUploadButtonClicked();

private:
	// Helper methods
	void cleanUpConnection();
	void switcherConnected();
	void switcherDisconnected();
	void updateMediaComboItems(CComboBox* comboBox);
	void updateMediaPlayerComboSelection();
	void enableMediaPlayerButtons(BOOL enabled);
	void updateMediaPoolComboSelection();
	void enableMediaPoolWidgets(BOOL enabled);

	// Monitor callbacks
	LRESULT OnSwitcherDisconnected(WPARAM wParam, LPARAM lParam);
	LRESULT OnMediaPlayerSourceChanged(WPARAM wParam, LPARAM lParam);
	LRESULT OnMediaPlayerPlayingChanged(WPARAM wParam, LPARAM lParam);
	LRESULT OnMediaPlayerBeginChanged(WPARAM wParam, LPARAM lParam);
	LRESULT OnMediaPlayerLoopChanged(WPARAM wParam, LPARAM lParam);
	LRESULT OnStillClipNameValidChanged(WPARAM wParam, LPARAM lParam);
	LRESULT OnMediaPoolTargetChanged(WPARAM wParam, LPARAM lParam);
	LRESULT OnStillsLockObtained(WPARAM wParam, LPARAM lParam);
	LRESULT OnClipLockObtained(WPARAM wParam, LPARAM lParam);
	LRESULT OnStillsTransferEnded(WPARAM wParam, LPARAM lParam);
	LRESULT OnClipTransferEnded(WPARAM wParam, LPARAM lParam);

	CEdit						mAddressEdit;
	CButton						mConnectButton;
	CEdit						mNameEdit;
	CComboBox					mMediaPlayerSourceCombo;
	CButton						mMediaPlayerBeginButton;
	CButton						mMediaPlayerPreviousButton;
	CButton						mMediaPlayerPlayButton;
	CButton						mMediaPlayerNextButton;
	CButton						mMediaPlayerLoopButton;
	CComboBox					mMediaPoolTargetCombo;
	CButton						mMediaPoolUploadButton;
	CStatic						mMediaPoolProgressLabel;

	IBMDSwitcherDiscovery*					mSwitcherDiscovery;

	// these are set on connection
	IBMDSwitcher*							mSwitcher;
	std::vector<IBMDSwitcherMediaPlayer*>	mMediaPlayers;
	IBMDSwitcherMediaPool*					mMediaPool;
	IBMDSwitcherStills*						mStills;
	std::vector<IBMDSwitcherClip*>			mClips;
	StillTransfer*							mStillTransfer;
	std::vector<ClipTransfer*>				mClipTransfers;

	SwitcherMonitor*						mSwitcherMonitor;
	MediaPlayerMonitor*						mMediaPlayer1Monitor;
	StillsMonitor*							mStillsMonitor;
	std::vector<ClipMonitor*>				mClipMonitors;
};
