/* -LICENSE-START-
** Copyright (c) 2016 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#ifndef BMD_BMDSWITCHERAPI_V6_7_H
#define BMD_BMDSWITCHERAPI_V6_7_H

#include "BMDSwitcherAPI.h"

// Interface ID Declarations

BMD_CONST REFIID IID_IBMDSwitcherKeyFlyKeyFrameParameters_v6_7  = /* A6B8530A-B0C3-4304-8172-6D5ED93989B1 */ {0xA6,0xB8,0x53,0x0A,0xB0,0xC3,0x43,0x04,0x81,0x72,0x6D,0x5E,0xD9,0x39,0x89,0xB1};
BMD_CONST REFIID IID_IBMDSwitcherKeyFlyParameters_v6_7          = /* BB1D2964-F55B-491E-9C5D-8E43304C34FD */ {0xBB,0x1D,0x29,0x64,0xF5,0x5B,0x49,0x1E,0x9C,0x5D,0x8E,0x43,0x30,0x4C,0x34,0xFD};
BMD_CONST REFIID IID_IBMDSwitcherTransitionDVEParameters_v6_7   = /* CAA10B02-F7CB-47A6-97DA-C71DEF172712 */ {0xCA,0xA1,0x0B,0x02,0xF7,0xCB,0x47,0xA6,0x97,0xDA,0xC7,0x1D,0xEF,0x17,0x27,0x12};
BMD_CONST REFIID IID_IBMDSwitcher_v6_7                          = /* 38A89278-D0EF-499A-A73F-464C8F9C866E */ {0x38,0xA8,0x92,0x78,0xD0,0xEF,0x49,0x9A,0xA7,0x3F,0x46,0x4C,0x8F,0x9C,0x86,0x6E};
BMD_CONST REFIID IID_IBMDSwitcherDiscovery_v6_7                 = /* EB3FEF99-8561-4836-97B7-E5C768880D2A */ {0xEB,0x3F,0xEF,0x99,0x85,0x61,0x48,0x36,0x97,0xB7,0xE5,0xC7,0x68,0x88,0x0D,0x2A};

#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcherKeyFlyKeyFrameParameters_v6_7;
class IBMDSwitcherKeyFlyParameters_v6_7;
class IBMDSwitcherTransitionDVEParameters_v6_7;
class IBMDSwitcher_v6_7;
class IBMDSwitcherDiscovery_v6_7;

/* Interface IBMDSwitcherKeyFlyKeyFrameParameters_v6_7 - Key Fly Frame Parameters */

class IBMDSwitcherKeyFlyKeyFrameParameters_v6_7 : public IUnknown
{
public:
    virtual HRESULT GetSizeX (/* out */ double* multiplierX) = 0;
    virtual HRESULT SetSizeX (/* in */ double multiplierX) = 0;
    virtual HRESULT GetSizeY (/* out */ double* multiplierY) = 0;
    virtual HRESULT SetSizeY (/* in */ double multiplierY) = 0;
    virtual HRESULT GetPositionX (/* out */ double* offsetX) = 0;
    virtual HRESULT SetPositionX (/* in */ double offsetX) = 0;
    virtual HRESULT GetPositionY (/* out */ double* offsetY) = 0;
    virtual HRESULT SetPositionY (/* in */ double offsetY) = 0;
    virtual HRESULT GetRotation (/* out */ double* degrees) = 0;
    virtual HRESULT SetRotation (/* in */ double degrees) = 0;
    virtual HRESULT GetBorderWidthOut (/* out */ double* widthOut) = 0;
    virtual HRESULT SetBorderWidthOut (/* in */ double widthOut) = 0;
    virtual HRESULT GetBorderWidthIn (/* out */ double* widthIn) = 0;
    virtual HRESULT SetBorderWidthIn (/* in */ double widthIn) = 0;
    virtual HRESULT GetBorderSoftnessOut (/* out */ double* softOut) = 0;
    virtual HRESULT SetBorderSoftnessOut (/* in */ double softOut) = 0;
    virtual HRESULT GetBorderSoftnessIn (/* out */ double* softIn) = 0;
    virtual HRESULT SetBorderSoftnessIn (/* in */ double softIn) = 0;
    virtual HRESULT GetBorderBevelSoftness (/* out */ double* bevelSoft) = 0;
    virtual HRESULT SetBorderBevelSoftness (/* in */ double bevelSoft) = 0;
    virtual HRESULT GetBorderBevelPosition (/* out */ double* bevelPosition) = 0;
    virtual HRESULT SetBorderBevelPosition (/* in */ double bevelPosition) = 0;
    virtual HRESULT GetBorderOpacity (/* out */ double* opacity) = 0;
    virtual HRESULT SetBorderOpacity (/* in */ double opacity) = 0;
    virtual HRESULT GetBorderHue (/* out */ double* hue /* [0, 360) */) = 0;
    virtual HRESULT SetBorderHue (/* in */ double hue /* [0, 360) */) = 0;
    virtual HRESULT GetBorderSaturation (/* out */ double* sat) = 0;
    virtual HRESULT SetBorderSaturation (/* in */ double sat) = 0;
    virtual HRESULT GetBorderLuma (/* out */ double* luma) = 0;
    virtual HRESULT SetBorderLuma (/* in */ double luma) = 0;
    virtual HRESULT GetBorderLightSourceDirection (/* out */ double* degrees /* [0, 360) */) = 0;
    virtual HRESULT SetBorderLightSourceDirection (/* in */ double degrees /* [0, 360) */) = 0;
    virtual HRESULT GetBorderLightSourceAltitude (/* out */ double* altitude) = 0;
    virtual HRESULT SetBorderLightSourceAltitude (/* in */ double altitude) = 0;
    virtual HRESULT GetMaskTop (/* out */ double* top) = 0;
    virtual HRESULT SetMaskTop (/* in */ double top) = 0;
    virtual HRESULT GetMaskBottom (/* out */ double* bottom) = 0;
    virtual HRESULT SetMaskBottom (/* in */ double bottom) = 0;
    virtual HRESULT GetMaskLeft (/* out */ double* left) = 0;
    virtual HRESULT SetMaskLeft (/* in */ double left) = 0;
    virtual HRESULT GetMaskRight (/* out */ double* right) = 0;
    virtual HRESULT SetMaskRight (/* in */ double right) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback) = 0;
	
protected:
	virtual ~IBMDSwitcherKeyFlyKeyFrameParameters_v6_7 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyFlyParameters_v6_7 - Key Fly Parameters */

class IBMDSwitcherKeyFlyParameters_v6_7 : public IUnknown
{
public:
    virtual HRESULT GetFly (/* out */ bool* isFlyKey) = 0;
    virtual HRESULT SetFly (/* in */ bool isFlyKey) = 0;
    virtual HRESULT GetCanFly (/* out */ bool* canFly) = 0;
    virtual HRESULT GetRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetSizeX (/* out */ double* multiplierX) = 0;
    virtual HRESULT SetSizeX (/* in */ double multiplierX) = 0;
    virtual HRESULT GetSizeY (/* out */ double* multiplierY) = 0;
    virtual HRESULT SetSizeY (/* in */ double multiplierY) = 0;
    virtual HRESULT GetPositionX (/* out */ double* offsetX) = 0;
    virtual HRESULT SetPositionX (/* in */ double offsetX) = 0;
    virtual HRESULT GetPositionY (/* out */ double* offsetY) = 0;
    virtual HRESULT SetPositionY (/* in */ double offsetY) = 0;
    virtual HRESULT GetRotation (/* out */ double* degrees) = 0;
    virtual HRESULT SetRotation (/* in */ double degrees) = 0;
    virtual HRESULT ResetRotation (void) = 0;
    virtual HRESULT ResetDVE (void) = 0; // Resets all DVE parameters, excluding mask
    virtual HRESULT ResetDVEFull (void) = 0; // Resets all DVE parameters to full screen, excluding mask
    virtual HRESULT IsKeyFrameStored (/* in */ BMDSwitcherFlyKeyFrame keyFrame, /* out */ bool* stored) = 0;
    virtual HRESULT StoreAsKeyFrame (/* in */ BMDSwitcherFlyKeyFrame keyFrame) = 0; // Stores current state into the specified Key Frame(s), only Key Frame A and/or B can be specified.
    virtual HRESULT ClearKeyFrame (/* in */ BMDSwitcherFlyKeyFrame keyFrame) = 0; // Clears the specified Key Frame(s), only Key Frame A and/or B can be specified.
    virtual HRESULT RunToKeyFrame (/* in */ BMDSwitcherFlyKeyFrame destination) = 0; // Can only specify 1 Key Frame destination
    virtual HRESULT IsAtKeyFrames (/* out */ BMDSwitcherFlyKeyFrame* keyFrames) = 0;
	virtual HRESULT GetKeyFrameParameters (/* in */ BMDSwitcherFlyKeyFrame keyFrame, /* out */ IBMDSwitcherKeyFlyKeyFrameParameters_v6_7** keyFrameParameters) = 0;
    virtual HRESULT IsRunning (/* out */ bool* isRunning, /* out */ BMDSwitcherFlyKeyFrame* destination) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyFlyParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyFlyParametersCallback* callback) = 0;
	
protected:
	virtual ~IBMDSwitcherKeyFlyParameters_v6_7 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionDVEParameters_v6_7 - Transition DVE Parameters */

class IBMDSwitcherTransitionDVEParameters_v6_7 : public IUnknown
{
public:
    virtual HRESULT GetRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetLogoRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetLogoRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetReverse (/* out */ bool* reverse) = 0;
    virtual HRESULT SetReverse (/* in */ bool reverse) = 0;
    virtual HRESULT GetFlipFlop (/* out */ bool* flipflop) = 0;
    virtual HRESULT SetFlipFlop (/* in */ bool flipflop) = 0;
    virtual HRESULT GetStyle (/* out */ BMDSwitcherDVETransitionStyle* style) = 0;
    virtual HRESULT SetStyle (/* in */ BMDSwitcherDVETransitionStyle style) = 0;
    virtual HRESULT GetInputFill (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputFill (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetInputCut (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputCut (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetFillInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* mask) = 0;
    virtual HRESULT GetCutInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* mask) = 0;
    virtual HRESULT GetEnableKey (/* out */ bool* enableKey) = 0;
    virtual HRESULT SetEnableKey (/* in */ bool enableKey) = 0;
    virtual HRESULT GetPreMultiplied (/* out */ bool* preMultiplied) = 0;
    virtual HRESULT SetPreMultiplied (/* in */ bool preMultiplied) = 0;
    virtual HRESULT GetClip (/* out */ double* clip) = 0;
    virtual HRESULT SetClip (/* in */ double clip) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetInverse (/* out */ bool* inverse) = 0;
    virtual HRESULT SetInverse (/* in */ bool inverse) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherTransitionDVEParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherTransitionDVEParametersCallback* callback) = 0;
	
protected:
	virtual ~IBMDSwitcherTransitionDVEParameters_v6_7 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcher_v6_7 - Switcher Object */

class IBMDSwitcher_v6_7 : public IUnknown
{
public:
    virtual HRESULT GetProductName (/* out */ CFStringRef* productName) = 0;
    virtual HRESULT GetVideoMode (/* out */ BMDSwitcherVideoMode* videoMode) = 0;
    virtual HRESULT SetVideoMode (/* in */ BMDSwitcherVideoMode videoMode) = 0;
    virtual HRESULT DoesSupportVideoMode (/* in */ BMDSwitcherVideoMode videoMode, /* out */ bool* supported) = 0;
    virtual HRESULT GetMethodForDownConvertedSD (/* out */ BMDSwitcherDownConversionMethod* method) = 0;
    virtual HRESULT SetMethodForDownConvertedSD (/* in */ BMDSwitcherDownConversionMethod method) = 0;
    virtual HRESULT GetDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* out */ BMDSwitcherVideoMode* downConvertedHDVideoMode) = 0;
    virtual HRESULT SetDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode downConvertedHDVideoMode) = 0;
    virtual HRESULT DoesSupportDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode downConvertedHDVideoMode, /* out */ bool* supported) = 0;
    virtual HRESULT GetMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* out */ BMDSwitcherVideoMode* multiviewVideoMode) = 0;
    virtual HRESULT SetMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode multiviewVideoMode) = 0;
    virtual HRESULT DoesSupportMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode multiviewVideoMode, /* out */ bool* supported) = 0;
    virtual HRESULT GetPowerStatus (/* out */ BMDSwitcherPowerStatus* powerStatus) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherCallback* callback) = 0;
	
protected:
	virtual ~IBMDSwitcher_v6_7 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherDiscovery_v6_7 - Used to discover and connect to switchers */

class IBMDSwitcherDiscovery_v6_7 : public IUnknown
{
public:
	virtual HRESULT ConnectTo (/* in */ CFStringRef deviceAddress, /* out */ IBMDSwitcher_v6_7** switcherDevice, /* out */ BMDSwitcherConnectToFailure* failReason) = 0;
	
protected:
	virtual ~IBMDSwitcherDiscovery_v6_7 () {} // call Release method to drop reference count
};

/* Functions */

extern "C" {

	IBMDSwitcherDiscovery_v6_7* CreateBMDSwitcherDiscoveryInstance_v6_7 (void);

}

#endif      // defined(__cplusplus)
#endif /* BMD_BMDSWITCHERAPI_V6_7_H */
