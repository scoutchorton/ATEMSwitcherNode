/* -LICENSE-START-
 ** Copyright (c) 2020 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#ifndef BMD_BMDSWITCHERAPI_V8_1_2_H
#define BMD_BMDSWITCHERAPI_V8_1_2_H


#ifndef BMD_CONST
	#if defined(_MSC_VER)
		#define BMD_CONST __declspec(selectany) static const
	#else
		#define BMD_CONST static const
	#endif
#endif

#include "BMDSwitcherAPI.h"

BMD_CONST REFIID IID_IBMDSwitcher_v8_1_2                     = /* 04ADE67B-27B1-48A7-80A3-553230C5046F */ { 0x04,0xAD,0xE6,0x7B,0x27,0xB1,0x48,0xA7,0x80,0xA3,0x55,0x32,0x30,0xC5,0x04,0x6F };
BMD_CONST REFIID IID_IBMDSwitcherDiscovery_v8_1_2            = /* 568FC291-CEB5-4A1E-95AC-43FDE5E91249 */ { 0x56,0x8F,0xC2,0x91,0xCE,0xB5,0x4A,0x1E,0x95,0xAC,0x43,0xFD,0xE5,0xE9,0x12,0x49 };
BMD_CONST REFIID IID_IBMDSwitcherMultiView_v8_1_2            = /* BCFAAA0B-295B-4208-92D8-20BFEEF5B4D7 */ { 0xBC,0xFA,0xAA,0x0B,0x29,0x5B,0x42,0x08,0x92,0xD8,0x20,0xBF,0xEE,0xF5,0xB4,0xD7 };
BMD_CONST REFIID IID_IBMDSwitcherMultiViewIterator_v8_1_2    = /* 6A5BCCD8-CCD8-4983-9E6A-5FEE666D0ACA */ { 0x6A,0x5B,0xCC,0xD8,0xCC,0xD8,0x49,0x83,0x9E,0x6A,0x5F,0xEE,0x66,0x6D,0x0A,0xCA };

#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcher_v8_1_2;
class IBMDSwitcherDiscovery_v8_1_2;
class IBMDSwitcherMultiView_v8_1_2;
class IBMDSwitcherMultiViewIterator_v8_1_2;

/* Interface IBMDSwitcher - Switcher Object */

class BMD_PUBLIC IBMDSwitcher_v8_1_2 : public IUnknown
{
public:
    virtual HRESULT GetProductName (/* out */ CFStringRef* productName) = 0;
    virtual HRESULT GetVideoMode (/* out */ BMDSwitcherVideoMode* videoMode) = 0;
    virtual HRESULT SetVideoMode (/* in */ BMDSwitcherVideoMode videoMode) = 0;
    virtual HRESULT DoesSupportVideoMode (/* in */ BMDSwitcherVideoMode videoMode, /* out */ bool* supported) = 0;
    virtual HRESULT DoesVideoModeChangeRequireReconfiguration (/* in */ BMDSwitcherVideoMode videoMode, /* out */ bool* required) = 0;
    virtual HRESULT GetMethodForDownConvertedSD (/* out */ BMDSwitcherDownConversionMethod* method) = 0;
    virtual HRESULT SetMethodForDownConvertedSD (/* in */ BMDSwitcherDownConversionMethod method) = 0;
    virtual HRESULT GetDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* out */ BMDSwitcherVideoMode* downConvertedHDVideoMode) = 0;
    virtual HRESULT SetDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode downConvertedHDVideoMode) = 0;
    virtual HRESULT DoesSupportDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode downConvertedHDVideoMode, /* out */ bool* supported) = 0;
    virtual HRESULT GetMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* out */ BMDSwitcherVideoMode* multiviewVideoMode) = 0;
    virtual HRESULT SetMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode multiviewVideoMode) = 0;
    virtual HRESULT DoesSupportMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode multiviewVideoMode, /* out */ bool* supported) = 0;
    virtual HRESULT Get3GSDIOutputLevel (/* out */ BMDSwitcher3GSDIOutputLevel* outputLevel) = 0;
    virtual HRESULT Set3GSDIOutputLevel (/* in */ BMDSwitcher3GSDIOutputLevel outputLevel) = 0;
    virtual HRESULT GetPowerStatus (/* out */ BMDSwitcherPowerStatus* powerStatus) = 0;
    virtual HRESULT GetTimeCode (/* out */ uint8_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames, /* out */ bool* dropFrame) = 0;
    virtual HRESULT SetTimeCode (/* in */ uint8_t hours, /* in */ uint8_t minutes, /* in */ uint8_t seconds, /* in */ uint8_t frames) = 0;
    virtual HRESULT RequestTimeCode (void) = 0;
    virtual HRESULT GetTimeCodeLocked (/* out */ bool* timeCodeLocked) = 0;
    virtual HRESULT GetAreOutputsConfigurable (/* out */ bool* configurable) = 0;
    virtual HRESULT GetSuperSourceCascade (/* out */ bool* cascade) = 0;
    virtual HRESULT SetSuperSourceCascade (/* in */ bool cascade) = 0;
    virtual HRESULT SuspendStreaming (/* in */ uint32_t durationMs) = 0;
    virtual HRESULT AllowStreamingToResume (void) = 0;
    virtual HRESULT DoesSupportAutoVideoMode (/* out */ bool* supported) = 0;
    virtual HRESULT GetAutoVideoMode (/* out */ bool* enabled) = 0;
    virtual HRESULT GetAutoVideoModeDetected (/* out */ bool* detected) = 0;
    virtual HRESULT SetAutoVideoMode (/* in */ bool enabled) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcher_v8_1_2 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherDiscovery - Used to discover and connect to switchers */

class BMD_PUBLIC IBMDSwitcherDiscovery_v8_1_2 : public IUnknown
{
public:
    virtual HRESULT ConnectTo (/* in */ CFStringRef deviceAddress, /* out */ IBMDSwitcher_v8_1_2** switcherDevice, /* out */ BMDSwitcherConnectToFailure* failReason) = 0;

protected:
    virtual ~IBMDSwitcherDiscovery_v8_1_2 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMultiView_v8_1_2 - MultiView Object */

class BMD_PUBLIC IBMDSwitcherMultiView_v8_1_2 : public IUnknown
{
public:
    virtual HRESULT GetLayout (/* out */ BMDSwitcherMultiViewLayout* layout) = 0;
    virtual HRESULT SetLayout (/* in */ BMDSwitcherMultiViewLayout layout) = 0;
    virtual HRESULT SupportsQuadrantLayout (/* out */ bool* supportsQuadrantLayout) = 0;
    virtual HRESULT GetWindowInput (/* in */ uint32_t window, /* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetWindowInput (/* in */ uint32_t window, /* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetWindowCount (/* out */ uint32_t* windowCount) = 0;
    virtual HRESULT GetInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* availabilityMask) = 0;
    virtual HRESULT CanRouteInputs (/* out */ bool* canRoute) = 0;
    virtual HRESULT SupportsVuMeters (/* out */ bool* supportsVuMeters) = 0;
    virtual HRESULT CurrentInputSupportsVuMeter (/* in */ uint32_t window, /* out */ bool* supportsVuMeter) = 0;
    virtual HRESULT GetVuMeterEnabled (/* in */ uint32_t window, /* out */ bool* enabled) = 0;
    virtual HRESULT SetVuMeterEnabled (/* in */ uint32_t window, /* in */ bool enabled) = 0;
    virtual HRESULT GetVuMeterOpacity (/* out */ double* opacity) = 0;
    virtual HRESULT SetVuMeterOpacity (/* in */ double opacity) = 0;
    virtual HRESULT CanToggleSafeAreaEnabled (/* out */ bool* canToggleSafeAreaEnabled) = 0;
    virtual HRESULT CurrentInputSupportsSafeArea (/* in */ uint32_t window, /* out */ bool* supportsSafeArea) = 0;
    virtual HRESULT GetSafeAreaEnabled (/* in */ uint32_t window, /* out */ bool* enabled) = 0;
    virtual HRESULT SetSafeAreaEnabled (/* in */ uint32_t window, /* in */ bool enabled) = 0;
    virtual HRESULT SupportsProgramPreviewSwap (/* out */ bool* supportsProgramPreviewSwap) = 0;
    virtual HRESULT GetProgramPreviewSwapped (/* out */ bool* swapped) = 0;
    virtual HRESULT SetProgramPreviewSwapped (/* in */ bool swapped) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherMultiViewCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMultiViewCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherMultiView_v8_1_2 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMultiViewIterator_v8_1_2 - MultiView Iterator */

class BMD_PUBLIC IBMDSwitcherMultiViewIterator_v8_1_2 : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherMultiView_v8_1_2** multiView) = 0;

protected:
    virtual ~IBMDSwitcherMultiViewIterator_v8_1_2 () {} // call Release method to drop reference count
};


#endif      // defined(__cplusplus)
#endif /* defined(BMD_BMDSWITCHERAPI_V8_1_2_H) */
