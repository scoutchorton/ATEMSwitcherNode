/* -LICENSE-START-
 ** Copyright (c) 2019 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#ifndef BMD_BMDSWITCHERAPI_V8_1_H
#define BMD_BMDSWITCHERAPI_V8_1_H


#ifndef BMD_CONST
	#if defined(_MSC_VER)
		#define BMD_CONST __declspec(selectany) static const
	#else
		#define BMD_CONST static const
	#endif
#endif

#include "BMDSwitcherAPI.h"

BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioInputXLRCallback_v8_1    = /* 64F0DCA8-CEF4-4C72-AC24-D7BB7DF38737 */ { 0x64,0xF0,0xDC,0xA8,0xCE,0xF4,0x4C,0x72,0xAC,0x24,0xD7,0xBB,0x7D,0xF3,0x87,0x37 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioInputXLR_v8_1            = /* CD9FE826-776E-44F6-A508-EF7DFAA9E5F8 */ { 0xCD,0x9F,0xE8,0x26,0x77,0x6E,0x44,0xF6,0xA5,0x08,0xEF,0x7D,0xFA,0xA9,0xE5,0xF8 };

BMD_CONST REFIID IID_IBMDSwitcherMediaPool_v8_1                         = /* 59A3056E-7B62-46F0-8B78-1FB149F7372C */ { 0x59,0xA3,0x05,0x6E,0x7B,0x62,0x46,0xF0,0x8B,0x78,0x1F,0xB1,0x49,0xF7,0x37,0x2C };

#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcherAudioInputXLRCallback_v8_1;
class IBMDSwitcherAudioInputXLR_v8_1;
class IBMDSwitcherMediaPool_v8_1;


/* Enum BMDSwitcherFairlightAudioInputXLREventType_v8_1 - Used in IBMDSwitcherFairlightAudioInputXLRCallback_v8_1 */

typedef uint32_t BMDSwitcherFairlightAudioInputXLREventType_v8_1;
enum _BMDSwitcherFairlightAudioInputXLREventType_v8_1 {
    bmdSwitcherFairlightAudioInputXLREventTypeRCAToXLREnabledChanged_v8_1 = /* 'rtxC' */ 0x72747843
};

/* Interface IBMDSwitcherFairlightAudioInputXLRCallback_v8_1 - Fairlight Audio Input XLR Object Callback */

class BMD_PUBLIC IBMDSwitcherFairlightAudioInputXLRCallback_v8_1 : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherFairlightAudioInputXLREventType_v8_1 eventType) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioInputXLRCallback_v8_1 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioInputXLR_v8_1  - Fairlight Audio Input XLR Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioInputXLR_v8_1 : public IUnknown
{
public:
    virtual HRESULT HasRCAToXLR (/* out */ bool* hasRcaToXlr) = 0;
    virtual HRESULT GetRCAToXLREnabled (/* out */ bool* rcaToXlrEnabled) = 0;
    virtual HRESULT SetRCAToXLREnabled (/* in */ bool rcaToXlrEnabled) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioInputXLRCallback_v8_1* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioInputXLRCallback_v8_1* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioInputXLR_v8_1 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMediaPool_v8_1 - Frame Pool for Media Players */

class BMD_PUBLIC IBMDSwitcherMediaPool_v8_1 : public IUnknown
{
public:
    virtual HRESULT GetStills (/* out */ IBMDSwitcherStills** stills) = 0;
    virtual HRESULT GetClip (/* in */ uint32_t clipIndex, /* out */ IBMDSwitcherClip** clip) = 0;
    virtual HRESULT GetClipCount (/* out */ uint32_t* clipCount) = 0;
    virtual HRESULT CreateFrame (/* in */ BMDSwitcherPixelFormat pixelFormat, /* in */ uint32_t width, /* in */ uint32_t height, /* out */ IBMDSwitcherFrame** frame) = 0;
    virtual HRESULT CreateAudio (/* in */ uint32_t sizeBytes, /* out */ IBMDSwitcherAudio** audio) = 0;
    virtual HRESULT GetFrameTotalForClips (/* out */ uint32_t* total) = 0;
    virtual HRESULT GetClipMaxFrameCounts (/* in */ uint32_t clipCount, /* out */ uint32_t* clipMaxFrameCounts) = 0;	// one array element per clip, each element holds the maximum frame count
    virtual HRESULT SetClipMaxFrameCounts (/* in */ uint32_t clipCount, /* in */ const uint32_t* clipMaxFrameCounts) = 0;	// one array element per clip, each element holds the maximum frame count
    virtual HRESULT Clear (void) = 0;	// clears all stills, clips and clip audio
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherMediaPoolCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMediaPoolCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherMediaPool_v8_1 () {} // call Release method to drop reference count
};

#endif      // defined(__cplusplus)
#endif /* defined(BMD_BMDSWITCHERAPI_V8_1_H) */
