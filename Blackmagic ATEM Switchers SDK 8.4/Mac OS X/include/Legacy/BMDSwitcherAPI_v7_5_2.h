/* -LICENSE-START-
** Copyright (c) 2018 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#ifndef BMD_BMDSWITCHERAPI_V7_5_2_H
#define BMD_BMDSWITCHERAPI_V7_5_2_H


#ifndef BMD_CONST
    #if defined(_MSC_VER)
        #define BMD_CONST __declspec(selectany) static const
    #else
        #define BMD_CONST static const
    #endif
#endif

#include "BMDSwitcherAPI.h"

BMD_CONST REFIID IID_IBMDSwitcherMultiView_v7_5_2                        = /* 68083082-4FBF-429C-9FD0-4A73D8B9FD93 */ {0x68,0x08,0x30,0x82,0x4F,0xBF,0x42,0x9C,0x9F,0xD0,0x4A,0x73,0xD8,0xB9,0xFD,0x93};
BMD_CONST REFIID IID_IBMDSwitcherMultiViewIterator_v7_5_2                = /* B7A0D98B-A286-4651-A9E7-5596F62D652E */ {0xB7,0xA0,0xD9,0x8B,0xA2,0x86,0x46,0x51,0xA9,0xE7,0x55,0x96,0xF6,0x2D,0x65,0x2E};
BMD_CONST REFIID IID_IBMDSwitcherInputSuperSource_v7_5_2                 = /* 5051EFAA-DFE6-4A9E-9F5D-9356707F1D28 */ {0x50,0x51,0xEF,0xAA,0xDF,0xE6,0x4A,0x9E,0x9F,0x5D,0x93,0x56,0x70,0x7F,0x1D,0x28};
BMD_CONST REFIID IID_IBMDSwitcherInputSuperSourceCallback_v7_5_2         = /* 6B02A84C-0085-4593-973A-5E458079BD16 */ {0x6B,0x02,0xA8,0x4C,0x00,0x85,0x45,0x93,0x97,0x3A,0x5E,0x45,0x80,0x79,0xBD,0x16};
BMD_CONST REFIID IID_IBMDSwitcher_v7_5_2                                 = /* 3D480E2F-3CF4-474B-92E7-B7907EE83B41 */ {0x3D,0x48,0x0E,0x2F,0x3C,0xF4,0x47,0x4B,0x92,0xE7,0xB7,0x90,0x7E,0xE8,0x3B,0x41};
BMD_CONST REFIID IID_IBMDSwitcherDiscovery_v7_5_2                        = /* 2CEFAB87-89E6-442F-A4F6-8FE63A50E17E */ {0x2C,0xEF,0xAB,0x87,0x89,0xE6,0x44,0x2F,0xA4,0xF6,0x8F,0xE6,0x3A,0x50,0xE1,0x7E};
BMD_CONST REFIID IID_IBMDSwitcherTalkback_v7_5_2                         = /* 92220740-F63B-43A8-8D51-5B85901B4847 */ {0x92,0x22,0x07,0x40,0xF6,0x3B,0x43,0xA8,0x8D,0x51,0x5B,0x85,0x90,0x1B,0x48,0x47};
BMD_CONST REFIID IID_IBMDSwitcherMixMinusOutput_v7_5_2                   = /* E787458F-FCF4-4A9B-83D9-E25188170742 */ {0xE7,0x87,0x45,0x8F,0xFC,0xF4,0x4A,0x9B,0x83,0xD9,0xE2,0x51,0x88,0x17,0x07,0x42};
BMD_CONST REFIID IID_IBMDSwitcherMixMinusOutputIterator_v7_5_2           = /* C878F9F2-116D-48D4-9BBF-CA03447EA9A7 */ {0xC8,0x78,0xF9,0xF2,0x11,0x6D,0x48,0xD4,0x9B,0xBF,0xCA,0x03,0x44,0x7E,0xA9,0xA7};

#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcherMultiView_v7_5_2;
class IBMDSwitcherMultiViewIterator_v7_5_2;
class IBMDSwitcherInputSuperSource_v7_5_2;
class IBMDSwitcherInputSuperSourceCallback_v7_5_2;
class IBMDSwitcher_v7_5_2;
class IBMDSwitcherDiscovery_v7_5_2;
class IBMDSwitcherTalkback_v7_5_2;
class IBMDSwitcherMixMinusOutput_v7_5_2;
class IBMDSwitcherMixMinusOutputIterator_v7_5_2;

/* Enum BMDSwitcherMultiViewLayout_v7_5_2 - Layout for MultiView */

typedef uint32_t BMDSwitcherMultiViewLayout_v7_5_2;
enum _BMDSwitcherMultiViewLayout_v7_5_2 {
    bmdSwitcherMultiViewLayoutProgramTop_v7_5_2                         = 'mvpt',
    bmdSwitcherMultiViewLayoutProgramBottom_v7_5_2                      = 'mvpb',
    bmdSwitcherMultiViewLayoutProgramLeft_v7_5_2                        = 'mvpl',
    bmdSwitcherMultiViewLayoutProgramRight_v7_5_2                       = 'mvpr'
};

/* Enum BMDSwitcherInputSuperSourceEventType_v7_5_2 - Used in IBMDSwitcherInputSuperSourceCallback */

typedef uint32_t BMDSwitcherInputSuperSourceEventType_v7_5_2;
enum _BMDSwitcherInputSuperSourceEventType_v7_5_2 {
    bmdSwitcherInputSuperSourceEventTypeInputFillChanged_v7_5_2                  = 'ipfC',
    bmdSwitcherInputSuperSourceEventTypeInputCutChanged_v7_5_2                   = 'ipcC',
    bmdSwitcherInputSuperSourceEventTypeArtOptionChanged_v7_5_2                  = 'atoC',
    bmdSwitcherInputSuperSourceEventTypePreMultipliedChanged_v7_5_2              = 'shpC',
    bmdSwitcherInputSuperSourceEventTypeClipChanged_v7_5_2                       = 'clpC',
    bmdSwitcherInputSuperSourceEventTypeGainChanged_v7_5_2                       = 'ganC',
    bmdSwitcherInputSuperSourceEventTypeInverseChanged_v7_5_2                    = 'invC',
    bmdSwitcherInputSuperSourceEventTypeBorderEnabledChanged_v7_5_2              = 'enbC',
    bmdSwitcherInputSuperSourceEventTypeBorderBevelChanged_v7_5_2                = 'bvlC',
    bmdSwitcherInputSuperSourceEventTypeBorderWidthOutChanged_v7_5_2             = 'wdoC',
    bmdSwitcherInputSuperSourceEventTypeBorderWidthInChanged_v7_5_2              = 'wdiC',
    bmdSwitcherInputSuperSourceEventTypeBorderSoftnessOutChanged_v7_5_2          = 'sfoC',
    bmdSwitcherInputSuperSourceEventTypeBorderSoftnessInChanged_v7_5_2           = 'sfiC',
    bmdSwitcherInputSuperSourceEventTypeBorderBevelSoftnessChanged_v7_5_2        = 'bvsC',
    bmdSwitcherInputSuperSourceEventTypeBorderBevelPositionChanged_v7_5_2        = 'bvpC',
    bmdSwitcherInputSuperSourceEventTypeBorderHueChanged_v7_5_2                  = 'hueC',
    bmdSwitcherInputSuperSourceEventTypeBorderSaturationChanged_v7_5_2           = 'satC',
    bmdSwitcherInputSuperSourceEventTypeBorderLumaChanged_v7_5_2                 = 'lumC',
    bmdSwitcherInputSuperSourceEventTypeBorderLightSourceDirectionChanged_v7_5_2 = 'lsdC',
    bmdSwitcherInputSuperSourceEventTypeBorderLightSourceAltitudeChanged_v7_5_2  = 'lsaC'
};

/* Enum BMDSwitcherMixMinusOutputAudioMode_v7_5_2 - Mix-Minus Output Audio Mode */

typedef uint32_t BMDSwitcherMixMinusOutputAudioMode_v7_5_2;
enum _BMDSwitcherMixMinusOutputAudioMode_v7_5_2 {
	bmdSwitcherMixMinusOutputAudioModeProgramOut_v7_5_2           = 'mmop',
	bmdSwitcherMixMinusOutputAudioModeMixMinus_v7_5_2             = 'mmom'
};

/* Interface IBMDSwitcherMultiView_v7_5_2 - MultiView Object */

class IBMDSwitcherMultiView_v7_5_2 : public IUnknown
{
public:
    virtual HRESULT GetLayout (/* out */ BMDSwitcherMultiViewLayout_v7_5_2* layout) = 0;
    virtual HRESULT SetLayout (/* in */ BMDSwitcherMultiViewLayout_v7_5_2 layout) = 0;
    virtual HRESULT GetWindowInput (/* in */ uint32_t window, /* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetWindowInput (/* in */ uint32_t window, /* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetWindowCount (/* out */ uint32_t* windowCount) = 0;
    virtual HRESULT GetInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* availabilityMask) = 0;
    virtual HRESULT CanRouteInputs (/* out */ bool* canRoute) = 0;
    virtual HRESULT SupportsVuMeters (/* out */ bool* supportsVuMeters) = 0;
    virtual HRESULT CurrentInputSupportsVuMeter (/* in */ uint32_t window, /* out */ bool* supportsVuMeter) = 0;
    virtual HRESULT GetVuMeterEnabled (/* in */ uint32_t window, /* out */ bool* enabled) = 0;
    virtual HRESULT SetVuMeterEnabled (/* in */ uint32_t window, /* in */ bool enabled) = 0;
    virtual HRESULT GetVuMeterOpacity (/* out */ double* opacity) = 0;
    virtual HRESULT SetVuMeterOpacity (/* in */ double opacity) = 0;
    virtual HRESULT CanToggleSafeAreaEnabled (/* out */ bool* canToggleSafeAreaEnabled) = 0;
    virtual HRESULT GetSafeAreaEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT SetSafeAreaEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT SupportsProgramPreviewSwap (/* out */ bool* supportsProgramPreviewSwap) = 0;
    virtual HRESULT GetProgramPreviewSwapped (/* out */ bool* swapped) = 0;
    virtual HRESULT SetProgramPreviewSwapped (/* in */ bool swapped) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherMultiViewCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMultiViewCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherMultiView_v7_5_2 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMultiViewIterator_v7_5_2 - MultiView Iterator */

class IBMDSwitcherMultiViewIterator_v7_5_2 : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherMultiView_v7_5_2** multiView) = 0;

protected:
    virtual ~IBMDSwitcherMultiViewIterator_v7_5_2 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputSuperSource_v7_5_2 - SuperSource Input Object */

class IBMDSwitcherInputSuperSource_v7_5_2 : public IUnknown
{
public:
    virtual HRESULT GetInputCut (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputCut (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetInputFill (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputFill (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetCutInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* mask) = 0;
    virtual HRESULT GetFillInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* mask) = 0;
    virtual HRESULT GetArtOption (/* out */ BMDSwitcherSuperSourceArtOption* artOption) = 0;
    virtual HRESULT SetArtOption (/* in */ BMDSwitcherSuperSourceArtOption artOption) = 0;
    virtual HRESULT GetPreMultiplied (/* out */ bool* preMultiplied) = 0;
    virtual HRESULT SetPreMultiplied (/* in */ bool preMultiplied) = 0;
    virtual HRESULT GetClip (/* out */ double* clip) = 0;
    virtual HRESULT SetClip (/* in */ double clip) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetInverse (/* out */ bool* inverse) = 0;
    virtual HRESULT SetInverse (/* in */ bool inverse) = 0;
    virtual HRESULT GetBorderEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT SetBorderEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT GetBorderBevel (/* out */ BMDSwitcherBorderBevelOption* bevelOption) = 0;
    virtual HRESULT SetBorderBevel (/* in */ BMDSwitcherBorderBevelOption bevelOption) = 0;
    virtual HRESULT GetBorderWidthOut (/* out */ double* widthOut) = 0;
    virtual HRESULT SetBorderWidthOut (/* in */ double widthOut) = 0;
    virtual HRESULT GetBorderWidthIn (/* out */ double* widthIn) = 0;
    virtual HRESULT SetBorderWidthIn (/* in */ double widthIn) = 0;
    virtual HRESULT GetBorderSoftnessOut (/* out */ double* softnessOut) = 0;
    virtual HRESULT SetBorderSoftnessOut (/* in */ double softnessOut) = 0;
    virtual HRESULT GetBorderSoftnessIn (/* out */ double* softnessIn) = 0;
    virtual HRESULT SetBorderSoftnessIn (/* in */ double softnessIn) = 0;
    virtual HRESULT GetBorderBevelSoftness (/* out */ double* bevelSoftness) = 0;
    virtual HRESULT SetBorderBevelSoftness (/* in */ double bevelSoftness) = 0;
    virtual HRESULT GetBorderBevelPosition (/* out */ double* bevelPosition) = 0;
    virtual HRESULT SetBorderBevelPosition (/* in */ double bevelPosition) = 0;
    virtual HRESULT GetBorderHue (/* out */ double* hue /* [0, 360) */) = 0;
    virtual HRESULT SetBorderHue (/* in */ double hue /* [0, 360) */) = 0;
    virtual HRESULT GetBorderSaturation (/* out */ double* sat) = 0;
    virtual HRESULT SetBorderSaturation (/* in */ double sat) = 0;
    virtual HRESULT GetBorderLuma (/* out */ double* luma) = 0;
    virtual HRESULT SetBorderLuma (/* in */ double luma) = 0;
    virtual HRESULT GetBorderLightSourceDirection (/* out */ double* degrees) = 0;
    virtual HRESULT SetBorderLightSourceDirection (/* in */ double degrees) = 0;
    virtual HRESULT GetBorderLightSourceAltitude (/* out */ double* altitude) = 0;
    virtual HRESULT SetBorderLightSourceAltitude (/* in */ double altitude) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherInputSuperSourceCallback_v7_5_2* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherInputSuperSourceCallback_v7_5_2* callback) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;

protected:
    virtual ~IBMDSwitcherInputSuperSource_v7_5_2 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputSuperSourceCallback_v7_5_2 - SuperSource Input Object Callback */

class IBMDSwitcherInputSuperSourceCallback_v7_5_2 : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherInputSuperSourceEventType_v7_5_2 eventType) = 0;

protected:
    virtual ~IBMDSwitcherInputSuperSourceCallback_v7_5_2 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcher_v7_5_2 - Switcher Object */

class IBMDSwitcher_v7_5_2 : public IUnknown
{
public:
    virtual HRESULT GetProductName (/* out */ CFStringRef* productName) = 0;
    virtual HRESULT GetVideoMode (/* out */ BMDSwitcherVideoMode* videoMode) = 0;
    virtual HRESULT SetVideoMode (/* in */ BMDSwitcherVideoMode videoMode) = 0;
    virtual HRESULT DoesSupportVideoMode (/* in */ BMDSwitcherVideoMode videoMode, /* out */ bool* supported) = 0;
    virtual HRESULT GetMethodForDownConvertedSD (/* out */ BMDSwitcherDownConversionMethod* method) = 0;
    virtual HRESULT SetMethodForDownConvertedSD (/* in */ BMDSwitcherDownConversionMethod method) = 0;
    virtual HRESULT GetDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* out */ BMDSwitcherVideoMode* downConvertedHDVideoMode) = 0;
    virtual HRESULT SetDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode downConvertedHDVideoMode) = 0;
    virtual HRESULT DoesSupportDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode downConvertedHDVideoMode, /* out */ bool* supported) = 0;
    virtual HRESULT GetMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* out */ BMDSwitcherVideoMode* multiviewVideoMode) = 0;
    virtual HRESULT SetMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode multiviewVideoMode) = 0;
    virtual HRESULT DoesSupportMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode multiviewVideoMode, /* out */ bool* supported) = 0;
    virtual HRESULT Get3GSDIOutputLevel (/* out */ BMDSwitcher3GSDIOutputLevel* outputLevel) = 0;
    virtual HRESULT Set3GSDIOutputLevel (/* in */ BMDSwitcher3GSDIOutputLevel outputLevel) = 0;
    virtual HRESULT GetPowerStatus (/* out */ BMDSwitcherPowerStatus* powerStatus) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcher_v7_5_2 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherDiscovery_v7_5_2 - Used to discover and connect to switchers */

class IBMDSwitcherDiscovery_v7_5_2 : public IUnknown
{
public:
    virtual HRESULT ConnectTo (/* in */ CFStringRef deviceAddress, /* out */ IBMDSwitcher_v7_5_2** switcherDevice, /* out */ BMDSwitcherConnectToFailure* failReason) = 0;

protected:
    virtual ~IBMDSwitcherDiscovery_v7_5_2 () {} // call Release method to drop reference count
};

/* Functions */

extern "C" {

    IBMDSwitcherDiscovery_v7_5_2* CreateBMDSwitcherDiscoveryInstance_v7_5_2 (void);

}

/* Interface IBMDSwitcherTalkback_v7_5_2 - Talkback Object */

class BMD_PUBLIC IBMDSwitcherTalkback_v7_5_2 : public IUnknown
{
public:
    virtual HRESULT GetMuteSDI (/* out */ bool* muteSDI) = 0;
    virtual HRESULT SetMuteSDI (/* in */ bool muteSDI) = 0;
    virtual HRESULT InputCanMuteSDI (/* in */ BMDSwitcherAudioInputId audioInputId, /* out */ bool* canMuteSDI) = 0;
    virtual HRESULT CurrentInputSupportsMuteSDI (/* in */ BMDSwitcherAudioInputId audioInputId, /* out */ bool* supportsMuteSDI) = 0;
    virtual HRESULT GetInputMuteSDI (/* in */ BMDSwitcherAudioInputId audioInputId, /* out */ bool* muteSDI) = 0;
    virtual HRESULT SetInputMuteSDI (/* in */ BMDSwitcherAudioInputId audioInputId, /* in */ bool muteSDI) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherTalkbackCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherTalkbackCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherTalkback_v7_5_2 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMixMinusOutput_v7_5_2 - Mix-Minus Output Object */

class IBMDSwitcherMixMinusOutput_v7_5_2 : public IUnknown
{
public:
	virtual HRESULT GetAudioMode (/* out */ BMDSwitcherMixMinusOutputAudioMode_v7_5_2* audioMode) = 0;
	virtual HRESULT SetAudioMode (/* in */ BMDSwitcherMixMinusOutputAudioMode_v7_5_2 audioMode) = 0;
	virtual HRESULT GetMinusAudioInputId (/* out */ BMDSwitcherAudioInputId* audioInputId) = 0;
	virtual HRESULT AddCallback (/* in */ IBMDSwitcherMixMinusOutputCallback* callback) = 0;
	virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMixMinusOutputCallback* callback) = 0;
};

/* Interface IBMDSwitcherMixMinusOutputIterator_v7_5_2 - Mix-Minus Output Iterator */

class IBMDSwitcherMixMinusOutputIterator_v7_5_2 : public IUnknown
{
public:
	virtual HRESULT Next (/* out */ IBMDSwitcherMixMinusOutput_v7_5_2** mixMinusOutput) = 0;

protected:
	virtual ~IBMDSwitcherMixMinusOutputIterator_v7_5_2 () {} // call Release method to drop reference count
};

#endif      // defined(__cplusplus)
#endif /* defined(BMD_BMDSWITCHERAPI_V7_5_2_H) */
