/* -LICENSE-START-
** Copyright (c) 2013 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#ifndef BMD_BMDSWITCHERAPI_V4_0_H
#define BMD_BMDSWITCHERAPI_V4_0_H

#include "BMDSwitcherAPI.h"

// Interface ID Declarations

BMD_CONST REFIID IID_IBMDSwitcherCallback_v4_0                         = /* 6C6E4441-9421-4729-9951-988659E3A44A */ {0x6C,0x6E,0x44,0x41,0x94,0x21,0x47,0x29,0x99,0x51,0x98,0x86,0x59,0xE3,0xA4,0x4A};
BMD_CONST REFIID IID_IBMDSwitcher_v4_0                                 = /* 1E8701D0-258F-43ED-9EDC-434FD16E922D */ {0x1E,0x87,0x01,0xD0,0x25,0x8F,0x43,0xED,0x9E,0xDC,0x43,0x4F,0xD1,0x6E,0x92,0x2D};
BMD_CONST REFIID IID_IBMDSwitcherDiscovery_v4_0                        = /* A676047A-D3A4-44B1-B8B5-31D7289D266A */ {0xA6,0x76,0x04,0x7A,0xD3,0xA4,0x44,0xB1,0xB8,0xB5,0x31,0xD7,0x28,0x9D,0x26,0x6A};
BMD_CONST REFIID IID_IBMDSwitcherStills_v4_0                           = /* AA26D656-2400-407B-8D3C-796B506F99DB */ {0xAA,0x26,0xD6,0x56,0x24,0x00,0x40,0x7B,0x8D,0x3C,0x79,0x6B,0x50,0x6F,0x99,0xDB};
BMD_CONST REFIID IID_IBMDSwitcherClip_v4_0                             = /* 3CC10CA1-3E13-4C69-9FFC-A37A62B05869 */ {0x3C,0xC1,0x0C,0xA1,0x3E,0x13,0x4C,0x69,0x9F,0xFC,0xA3,0x7A,0x62,0xB0,0x58,0x69};
BMD_CONST REFIID IID_IBMDSwitcherMediaPool_v4_0                        = /* D9B2A1E7-023E-42EC-96C9-5FFE28CE8399 */ {0xD9,0xB2,0xA1,0xE7,0x02,0x3E,0x42,0xEC,0x96,0xC9,0x5F,0xFE,0x28,0xCE,0x83,0x99};
BMD_CONST REFIID IID_IBMDSwitcherAudioInput_v4_0                       = /* 87B99021-FA29-4720-9526-4512CA553858 */ {0x87,0xB9,0x90,0x21,0xFA,0x29,0x47,0x20,0x95,0x26,0x45,0x12,0xCA,0x55,0x38,0x58};
BMD_CONST REFIID IID_IBMDSwitcherAudioInputIterator_v4_0               = /* 0194C65A-3EDA-4853-A6D3-D59CD12B3C0A */ {0x01,0x94,0xC6,0x5A,0x3E,0xDA,0x48,0x53,0xA6,0xD3,0xD5,0x9C,0xD1,0x2B,0x3C,0x0A};

/* Enum BMDSwitcherPropertyId_v4_0 - IBMDSwitcher Property ID */

typedef uint32_t BMDSwitcherPropertyId_v4_0;
enum _BMDSwitcherPropertyId_v4_0 {
    bmdSwitcherPropertyIdProductName_v4_0                             = 'pdnm',	// String type, Get only
    bmdSwitcherPropertyIdProductId_v4_0                               = 'pdid',	// Int type (BMDSwitcherProductId), Get only
    bmdSwitcherPropertyIdVideoMode_v4_0                               = 'vdmd',	// Int type (BMDSwitcherVideoMode), Get/Set
    bmdSwitcherPropertyIdDownConvertMode_v4_0                         = 'dcmd',	// Int type (BMDSwitcherDownConverterMode), Get/Set
    bmdSwitcherPropertyIdTimecode_v4_0                                = 'tcde',	// Int type (four bytes), Get only
    bmdSwitcherPropertyIdPowerStatus_v4_0                             = 'pwrs'	// Int type (BMDSwitcherPowerStatus), Get only
};

#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcherCallback_v4_0;
class IBMDSwitcher_v4_0;
class IBMDSwitcherDiscovery_v4_0;
class IBMDSwitcherStills_v4_0;
class IBMDSwitcherClip_v4_0;
class IBMDSwitcherMediaPool_v4_0;
class IBMDSwitcherAudioInput_v4_0;
class IBMDSwitcherAudioInputIterator_v4_0;

/* Interface IBMDSwitcherCallback_v4_0 - Switcher Callback Delegate */

class IBMDSwitcherCallback_v4_0 : public IUnknown
{
public:
    virtual HRESULT PropertyChanged (/* in */ BMDSwitcherPropertyId_v4_0 propertyId) = 0;
    virtual HRESULT Disconnected (void) = 0;

protected:
    virtual ~IBMDSwitcherCallback_v4_0 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcher_v4_0 - Switcher Object */

class IBMDSwitcher_v4_0 : public IUnknown
{
public:
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherCallback_v4_0* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherCallback_v4_0* callback) = 0;
    virtual HRESULT SetFlag (/* in */ BMDSwitcherPropertyId_v4_0 propertyId, /* in */ bool value) = 0;
    virtual HRESULT GetFlag (/* in */ BMDSwitcherPropertyId_v4_0 propertyId, /* out */ bool* value) = 0;
    virtual HRESULT SetInt (/* in */ BMDSwitcherPropertyId_v4_0 propertyId, /* in */ int64_t value) = 0;
    virtual HRESULT GetInt (/* in */ BMDSwitcherPropertyId_v4_0 propertyId, /* out */ int64_t* value) = 0;
    virtual HRESULT SetFloat (/* in */ BMDSwitcherPropertyId_v4_0 propertyId, /* in */ double value) = 0;
    virtual HRESULT GetFloat (/* in */ BMDSwitcherPropertyId_v4_0 propertyId, /* out */ double* value) = 0;
    virtual HRESULT SetString (/* in */ BMDSwitcherPropertyId_v4_0 propertyId, /* in */ CFStringRef value) = 0;
    virtual HRESULT GetString (/* in */ BMDSwitcherPropertyId_v4_0 propertyId, /* out */ CFStringRef* value) = 0;

protected:
    virtual ~IBMDSwitcher_v4_0 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherDiscovery_v4_0 - Used to discover and connect to switchers */

class IBMDSwitcherDiscovery_v4_0 : public IUnknown
{
public:
    virtual HRESULT ConnectTo (/* in */ CFStringRef deviceAddress, /* out */ IBMDSwitcher_v4_0** switcherDevice, /* out */ BMDSwitcherConnectToFailure* failReason) = 0;

protected:
    virtual ~IBMDSwitcherDiscovery_v4_0 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherStills_v4_0 - Stills */

class IBMDSwitcherStills_v4_0 : public IUnknown
{
public:
    virtual HRESULT GetCount (/* out */ uint32_t* count) = 0;
    virtual HRESULT IsValid (/* in */ uint32_t index, /* out */ bool* valid) = 0;
    virtual HRESULT GetName (/* in */ uint32_t index, /* out */ CFStringRef* name) = 0;
    virtual HRESULT GetHash (/* in */ uint32_t index, /* out */ BMDSwitcherHash* hash) = 0;
    virtual HRESULT SetInvalid (/* in */ uint32_t index) = 0;
    virtual HRESULT Lock (/* in */ IBMDSwitcherLockCallback* lockCallback) = 0;
    virtual HRESULT Unlock (/* in */ IBMDSwitcherLockCallback* lockCallback) = 0;
    virtual HRESULT Upload (/* in */ uint32_t index, /* in */ CFStringRef name, /* in */ IBMDSwitcherFrame* frame) = 0;
    virtual HRESULT Download (/* in */ uint32_t index) = 0;
    virtual HRESULT CancelTransfer (void) = 0;
    virtual HRESULT GetProgress (/* out */ double* progress) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherStillsCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherStillsCallback* callback) = 0;
};

/* Interface IBMDSwitcherClip_v4_0 - Clip */

class IBMDSwitcherClip_v4_0 : public IUnknown
{
public:
    virtual HRESULT GetIndex (/* out */ uint32_t* index) = 0;
    virtual HRESULT IsValid (/* out */ bool* valid) = 0;
    virtual HRESULT GetName (/* out */ CFStringRef* name) = 0;
    virtual HRESULT SetValid (/* in */ CFStringRef name, /* in */ uint32_t frameCount) = 0;
    virtual HRESULT SetInvalid (void) = 0;
    virtual HRESULT GetFrameCount (/* out */ uint32_t* frameCount) = 0;
    virtual HRESULT GetMaxFrameCount (/* out */ uint32_t* maxFrameCount) = 0;
    virtual HRESULT IsFrameValid (/* in */ uint32_t frameIndex, /* out */ bool* valid) = 0;
    virtual HRESULT GetFrameHash (/* in */ uint32_t frameIndex, /* out */ BMDSwitcherHash* hash) = 0;
    virtual HRESULT IsAudioValid (/* out */ bool* valid) = 0;
    virtual HRESULT GetAudioName (/* out */ CFStringRef* name) = 0;
    virtual HRESULT GetAudioHash (/* out */ BMDSwitcherHash* hash) = 0;
    virtual HRESULT SetAudioInvalid (void) = 0;
    virtual HRESULT Lock (/* in */ IBMDSwitcherLockCallback* lockCallback) = 0;
    virtual HRESULT Unlock (/* in */ IBMDSwitcherLockCallback* lockCallback) = 0;
    virtual HRESULT UploadFrame (/* in */ uint32_t frameIndex, /* in */ IBMDSwitcherFrame* frame) = 0;
    virtual HRESULT DownloadFrame (/* in */ uint32_t frameIndex) = 0;
    virtual HRESULT UploadAudio (/* in */ CFStringRef name, /* in */ IBMDSwitcherAudio* audio) = 0;
    virtual HRESULT DownloadAudio (void) = 0;
    virtual HRESULT CancelTransfer (void) = 0;
    virtual HRESULT GetProgress (/* out */ double* progress) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherClipCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherClipCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherClip_v4_0 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMediaPool_v4_0 - Frame Pool for Media Players */

class IBMDSwitcherMediaPool_v4_0 : public IUnknown
{
public:
    virtual HRESULT GetStills (/* out */ IBMDSwitcherStills_v4_0** stills) = 0;
    virtual HRESULT GetClip (/* in */ uint32_t clipIndex, /* out */ IBMDSwitcherClip_v4_0** clip) = 0;
    virtual HRESULT GetClipCount (/* out */ uint32_t* clipCount) = 0;
    virtual HRESULT CreateFrame (/* in */ BMDSwitcherPixelFormat pixelFormat, /* in */ uint32_t width, /* in */ uint32_t height, /* out */ IBMDSwitcherFrame** frame) = 0;
    virtual HRESULT CreateAudio (/* in */ uint32_t sizeBytes, /* out */ IBMDSwitcherAudio** audio) = 0;
    virtual HRESULT GetFrameTotalForClips (/* out */ uint32_t* total) = 0;
    virtual HRESULT GetClipMaxFrameCounts (/* in */ uint32_t clipCount, /* out */ uint32_t* clipMaxFrameCounts) = 0; // one array element per clip, each element holds the maximum frame count
    virtual HRESULT SetClipMaxFrameCounts (/* in */ uint32_t clipCount, /* in */ const uint32_t* clipMaxFrameCounts) = 0; // one array element per clip, each element holds the maximum frame count
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherMediaPoolCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMediaPoolCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherMediaPool_v4_0 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioInput_v4_0 - Audio Input Object */

class IBMDSwitcherAudioInput_v4_0 : public IUnknown
{
public:
    virtual HRESULT GetType (/* out */ BMDSwitcherAudioInputType* type) = 0;
    virtual HRESULT GetMixOption (/* out */ BMDSwitcherAudioMixOption* mixOption) = 0;
    virtual HRESULT SetMixOption (/* in */ BMDSwitcherAudioMixOption mixOption) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetBalance (/* out */ double* balance) = 0;
    virtual HRESULT SetBalance (/* in */ double balance) = 0;
    virtual HRESULT IsMixedIn (/* out */ bool* mixedIn) = 0;
    virtual HRESULT GetAudioInputId (/* out */ BMDSwitcherAudioInputId* audioInputId) = 0;
    virtual HRESULT ResetLevelNotificationPeaks (void) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherAudioInputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherAudioInputCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherAudioInput_v4_0 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioInputIterator_v4_0 - Audio Input Iterator */

class IBMDSwitcherAudioInputIterator_v4_0 : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherAudioInput_v4_0** audioInput) = 0;
    virtual HRESULT GetById (/* in */ BMDSwitcherAudioInputId audioInputId, /* out */ IBMDSwitcherAudioInput_v4_0** audioInput) = 0;

protected:
    virtual ~IBMDSwitcherAudioInputIterator_v4_0 () {} // call Release method to drop reference count
};

/* Functions */

extern "C" {

    IBMDSwitcherDiscovery_v4_0* CreateBMDSwitcherDiscoveryInstance_v4_0 (void);

}

#endif      // defined(__cplusplus)
#endif /* defined(BMD_BMDSWITCHERAPI_V4_0_H) */
