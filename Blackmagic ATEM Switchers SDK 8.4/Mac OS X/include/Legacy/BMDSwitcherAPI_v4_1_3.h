/* -LICENSE-START-
** Copyright (c) 2013 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#ifndef BMD_BMDSWITCHERAPI_V4_1_3_H
#define BMD_BMDSWITCHERAPI_V4_1_3_H

#include "BMDSwitcherAPI.h"

// Interface ID Declarations

BMD_CONST REFIID IID_IBMDSwitcherTransitionDVEParameters_v4_1_3	= /* 31CA3097-D178-4398-B041-059C1312F129 */ {0x31,0xCA,0x30,0x97,0xD1,0x78,0x43,0x98,0xB0,0x41,0x05,0x9C,0x13,0x12,0xF1,0x29};
BMD_CONST REFIID IID_IBMDSwitcherKey_v4_1_3						= /* 918E234D-67C1-452F-80A0-DB39FE6BCB21 */ {0x91,0x8E,0x23,0x4D,0x67,0xC1,0x45,0x2F,0x80,0xA0,0xDB,0x39,0xFE,0x6B,0xCB,0x21};
BMD_CONST REFIID IID_IBMDSwitcherKeyIterator_v4_1_3				= /* EFD545AE-2879-412B-84B7-17A04E4707ED */ {0xEF,0xD5,0x45,0xAE,0x28,0x79,0x41,0x2B,0x84,0xB7,0x17,0xA0,0x4E,0x47,0x07,0xED};
BMD_CONST REFIID IID_IBMDSwitcherInputSuperSource_v4_1_3		= /* 327DBE95-F003-409E-8FEB-D9C624C439BC */ {0x32,0x7D,0xBE,0x95,0xF0,0x03,0x40,0x9E,0x8F,0xEB,0xD9,0xC6,0x24,0xC4,0x39,0xBC};
BMD_CONST REFIID IID_IBMDSwitcherDownstreamKey_v4_1_3			= /* 6D10D51E-71FA-4031-BC13-95BE3653D0E6 */ {0x6D,0x10,0xD5,0x1E,0x71,0xFA,0x40,0x31,0xBC,0x13,0x95,0xBE,0x36,0x53,0xD0,0xE6};
BMD_CONST REFIID IID_IBMDSwitcherDownstreamKeyIterator_v4_1_3	= /* FD063042-B7FD-4819-BD1E-809DC380DFE9 */ {0xFD,0x06,0x30,0x42,0xB7,0xFD,0x48,0x19,0xBD,0x1E,0x80,0x9D,0xC3,0x80,0xDF,0xE9};

#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcherTransitionDVEParameters_v4_1_3;
class IBMDSwitcherKey_v4_1_3;
class IBMDSwitcherKeyIterator_v4_1_3;
class IBMDSwitcherInputSuperSource_v4_1_3;
class IBMDSwitcherDownstreamKey_v4_1_3;
class IBMDSwitcherDownstreamKeyIterator_v4_1_3;
class IBMDSwitcherInputSuperSourceCallback_v7_5_2;

/* Interface IBMDSwitcherTransitionDVEParameters_v4_1_3 - Transition DVE Parameters */

class IBMDSwitcherTransitionDVEParameters_v4_1_3 : public IUnknown
{
public:
    virtual HRESULT GetRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetLogoRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetLogoRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetReverse (/* out */ bool* reverse) = 0;
    virtual HRESULT SetReverse (/* in */ bool reverse) = 0;
    virtual HRESULT GetFlipFlop (/* out */ bool* flipflop) = 0;
    virtual HRESULT SetFlipFlop (/* in */ bool flipflop) = 0;
    virtual HRESULT GetStyle (/* out */ BMDSwitcherDVETransitionStyle* style) = 0;
    virtual HRESULT SetStyle (/* in */ BMDSwitcherDVETransitionStyle style) = 0;
    virtual HRESULT GetInputFill (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputFill (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetInputCut (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputCut (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetEnableKey (/* out */ bool* enableKey) = 0;
    virtual HRESULT SetEnableKey (/* in */ bool enableKey) = 0;
    virtual HRESULT GetPreMultiplied (/* out */ bool* preMultiplied) = 0;
    virtual HRESULT SetPreMultiplied (/* in */ bool preMultiplied) = 0;
    virtual HRESULT GetClip (/* out */ double* clip) = 0;
    virtual HRESULT SetClip (/* in */ double clip) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetInverse (/* out */ bool* inverse) = 0;
    virtual HRESULT SetInverse (/* in */ bool inverse) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherTransitionDVEParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherTransitionDVEParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherTransitionDVEParameters_v4_1_3 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKey_v4_1_3 - Key Object */

class IBMDSwitcherKey_v4_1_3 : public IUnknown
{
public:
    virtual HRESULT GetType (/* out */ BMDSwitcherKeyType* type) = 0;
    virtual HRESULT SetType (/* in */ BMDSwitcherKeyType type) = 0;
    virtual HRESULT GetInputCut (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputCut (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetInputFill (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputFill (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetOnAir (/* out */ bool* onAir) = 0;
    virtual HRESULT SetOnAir (/* in */ bool onAir) = 0;
    virtual HRESULT CanBeDVEKey (/* out */ bool* canDVE) = 0;
    virtual HRESULT GetMasked (/* out */ bool* maskEnabled) = 0;
    virtual HRESULT SetMasked (/* in */ bool maskEnabled) = 0;
    virtual HRESULT GetMaskTop (/* out */ double* top) = 0;
    virtual HRESULT SetMaskTop (/* in */ double top) = 0;
    virtual HRESULT GetMaskBottom (/* out */ double* bottom) = 0;
    virtual HRESULT SetMaskBottom (/* in */ double bottom) = 0;
    virtual HRESULT GetMaskLeft (/* out */ double* left) = 0;
    virtual HRESULT SetMaskLeft (/* in */ double left) = 0;
    virtual HRESULT GetMaskRight (/* out */ double* right) = 0;
    virtual HRESULT SetMaskRight (/* in */ double right) = 0;
    virtual HRESULT ResetMask (void) = 0;
    virtual HRESULT GetTransitionSelectionMask (/* out */ BMDSwitcherTransitionSelection* selectionMask) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherKey_v4_1_3 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyIterator_v4_1_3 - Key Iterator */

class IBMDSwitcherKeyIterator_v4_1_3 : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherKey_v4_1_3** key) = 0;

protected:
    virtual ~IBMDSwitcherKeyIterator_v4_1_3 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputSuperSource_v4_1_3 - SuperSource Input Object */

class IBMDSwitcherInputSuperSource_v4_1_3 : public IUnknown
{
public:
    virtual HRESULT GetInputCut (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputCut (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetInputFill (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputFill (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetArtOption (/* out */ BMDSwitcherSuperSourceArtOption* artOption) = 0;
    virtual HRESULT SetArtOption (/* in */ BMDSwitcherSuperSourceArtOption artOption) = 0;
    virtual HRESULT GetPreMultiplied (/* out */ bool* preMultiplied) = 0;
    virtual HRESULT SetPreMultiplied (/* in */ bool preMultiplied) = 0;
    virtual HRESULT GetClip (/* out */ double* clip) = 0;
    virtual HRESULT SetClip (/* in */ double clip) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetInverse (/* out */ bool* inverse) = 0;
    virtual HRESULT SetInverse (/* in */ bool inverse) = 0;
    virtual HRESULT GetInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* mask) = 0;
    virtual HRESULT GetBorderEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT SetBorderEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT GetBorderBevel (/* out */ BMDSwitcherBorderBevelOption* bevelOption) = 0;
    virtual HRESULT SetBorderBevel (/* in */ BMDSwitcherBorderBevelOption bevelOption) = 0;
    virtual HRESULT GetBorderWidthOut (/* out */ double* widthOut) = 0;
    virtual HRESULT SetBorderWidthOut (/* in */ double widthOut) = 0;
    virtual HRESULT GetBorderWidthIn (/* out */ double* widthIn) = 0;
    virtual HRESULT SetBorderWidthIn (/* in */ double widthIn) = 0;
    virtual HRESULT GetBorderSoftnessOut (/* out */ double* softnessOut) = 0;
    virtual HRESULT SetBorderSoftnessOut (/* in */ double softnessOut) = 0;
    virtual HRESULT GetBorderSoftnessIn (/* out */ double* softnessIn) = 0;
    virtual HRESULT SetBorderSoftnessIn (/* in */ double softnessIn) = 0;
    virtual HRESULT GetBorderBevelSoftness (/* out */ double* bevelSoftness) = 0;
    virtual HRESULT SetBorderBevelSoftness (/* in */ double bevelSoftness) = 0;
    virtual HRESULT GetBorderBevelPosition (/* out */ double* bevelPosition) = 0;
    virtual HRESULT SetBorderBevelPosition (/* in */ double bevelPosition) = 0;
    virtual HRESULT GetBorderHue (/* out */ double* hue) = 0;
    virtual HRESULT SetBorderHue (/* in */ double hue) = 0;
    virtual HRESULT GetBorderSaturation (/* out */ double* sat) = 0;
    virtual HRESULT SetBorderSaturation (/* in */ double sat) = 0;
    virtual HRESULT GetBorderLuma (/* out */ double* luma) = 0;
    virtual HRESULT SetBorderLuma (/* in */ double luma) = 0;
    virtual HRESULT GetBorderLightSourceDirection (/* out */ double* degrees) = 0;
    virtual HRESULT SetBorderLightSourceDirection (/* in */ double degrees) = 0;
    virtual HRESULT GetBorderLightSourceAltitude (/* out */ double* altitude) = 0;
    virtual HRESULT SetBorderLightSourceAltitude (/* in */ double altitude) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherInputSuperSourceCallback_v7_5_2* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherInputSuperSourceCallback_v7_5_2* callback) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;

protected:
    virtual ~IBMDSwitcherInputSuperSource_v4_1_3 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherDownstreamKey_v4_1_3 - Downstream Key Object */

class IBMDSwitcherDownstreamKey_v4_1_3 : public IUnknown
{
public:
    virtual HRESULT GetInputCut (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputCut (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetInputFill (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputFill (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetTie (/* out */ bool* tie) = 0;
    virtual HRESULT SetTie (/* in */ bool tie) = 0;
    virtual HRESULT GetRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetOnAir (/* out */ bool* onAir) = 0;
    virtual HRESULT SetOnAir (/* in */ bool onAir) = 0;
    virtual HRESULT PerformAutoTransition (void) = 0;
    virtual HRESULT IsTransitioning (/* out */ bool* isTransitioning) = 0;
    virtual HRESULT IsAutoTransitioning (/* out */ bool* isAutoTransitioning) = 0;
    virtual HRESULT GetFramesRemaining (/* out */ uint32_t* framesRemaining) = 0;
    virtual HRESULT GetPreMultiplied (/* out */ bool* preMultiplied) = 0;
    virtual HRESULT SetPreMultiplied (/* in */ bool preMultiplied) = 0;
    virtual HRESULT GetClip (/* out */ double* clip) = 0;
    virtual HRESULT SetClip (/* in */ double clip) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetInverse (/* out */ bool* inverse) = 0;
    virtual HRESULT SetInverse (/* in */ bool inverse) = 0;
    virtual HRESULT GetMasked (/* out */ bool* maskEnabled) = 0;
    virtual HRESULT SetMasked (/* in */ bool maskEnabled) = 0;
    virtual HRESULT GetMaskTop (/* out */ double* top) = 0;
    virtual HRESULT SetMaskTop (/* in */ double top) = 0;
    virtual HRESULT GetMaskBottom (/* out */ double* bottom) = 0;
    virtual HRESULT SetMaskBottom (/* in */ double bottom) = 0;
    virtual HRESULT GetMaskLeft (/* out */ double* left) = 0;
    virtual HRESULT SetMaskLeft (/* in */ double left) = 0;
    virtual HRESULT GetMaskRight (/* out */ double* right) = 0;
    virtual HRESULT SetMaskRight (/* in */ double right) = 0;
    virtual HRESULT ResetMask (void) = 0;
    virtual HRESULT GetInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* availabilityMask) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherDownstreamKeyCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherDownstreamKeyCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherDownstreamKey_v4_1_3 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherDownstreamKeyIterator_v4_1_3 - Downstream Key Iterator */

class IBMDSwitcherDownstreamKeyIterator_v4_1_3 : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherDownstreamKey_v4_1_3** downstreamKey) = 0;

protected:
    virtual ~IBMDSwitcherDownstreamKeyIterator_v4_1_3 () {} // call Release method to drop reference count
};

#endif      // defined(__cplusplus)
#endif // BMD_BMDSWITCHERAPI_V4_1_3_H
