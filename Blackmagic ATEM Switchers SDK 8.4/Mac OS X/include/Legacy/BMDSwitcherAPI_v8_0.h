/* -LICENSE-START-
** Copyright (c) 2019 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#ifndef BMD_BMDSWITCHERAPI_V8_0_H
#define BMD_BMDSWITCHERAPI_V8_0_H


#ifndef BMD_CONST
    #if defined(_MSC_VER)
        #define BMD_CONST __declspec(selectany) static const
    #else
        #define BMD_CONST static const
    #endif
#endif

#include "BMDSwitcherAPI.h"

BMD_CONST REFIID IID_IBMDSwitcher_v8_0                                 = /* DD606BC8-F69A-44E0-8324-1662B7851CB5 */ {0xDD,0x60,0x6B,0xC8,0xF6,0x9A,0x44,0xE0,0x83,0x24,0x16,0x62,0xB7,0x85,0x1C,0xB5};
BMD_CONST REFIID IID_IBMDSwitcherDiscovery_v8_0                        = /* 8D228029-3135-44DC-BE76-2F41CD192C58 */ {0x8D,0x22,0x80,0x29,0x31,0x35,0x44,0xDC,0xBE,0x76,0x2F,0x41,0xCD,0x19,0x2C,0x58};
BMD_CONST REFIID IID_IBMDSwitcherDownstreamKey_v8_0                    = /* E6E4F204-712C-4D59-848D-926B14BEF353 */ {0xE6,0xE4,0xF2,0x04,0x71,0x2C,0x4D,0x59,0x84,0x8D,0x92,0x6B,0x14,0xBE,0xF3,0x53};
BMD_CONST REFIID IID_IBMDSwitcherDownstreamKeyIterator_v8_0            = /* F2968750-709B-42C8-B450-92CA2B065D14 */ {0xF2,0x96,0x87,0x50,0x70,0x9B,0x42,0xC8,0xB4,0x50,0x92,0xCA,0x2B,0x06,0x5D,0x14};

#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcher_v8_0;
class IBMDSwitcherDiscovery_v8_0;
class IBMDSwitcherDownstreamKey_v8_0;

/* Interface IBMDSwitcher_v8_0 - Switcher Object */

class IBMDSwitcher_v8_0 : public IUnknown
{
public:
    virtual HRESULT GetProductName (/* out */ CFStringRef* productName) = 0;
    virtual HRESULT GetVideoMode (/* out */ BMDSwitcherVideoMode* videoMode) = 0;
    virtual HRESULT SetVideoMode (/* in */ BMDSwitcherVideoMode videoMode) = 0;
    virtual HRESULT DoesSupportVideoMode (/* in */ BMDSwitcherVideoMode videoMode, /* out */ bool* supported) = 0;
    virtual HRESULT DoesVideoModeChangeRequireReconfiguration (/* in */ BMDSwitcherVideoMode videoMode, /* out */ bool* required) = 0;
    virtual HRESULT GetMethodForDownConvertedSD (/* out */ BMDSwitcherDownConversionMethod* method) = 0;
    virtual HRESULT SetMethodForDownConvertedSD (/* in */ BMDSwitcherDownConversionMethod method) = 0;
    virtual HRESULT GetDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* out */ BMDSwitcherVideoMode* downConvertedHDVideoMode) = 0;
    virtual HRESULT SetDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode downConvertedHDVideoMode) = 0;
    virtual HRESULT DoesSupportDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode downConvertedHDVideoMode, /* out */ bool* supported) = 0;
    virtual HRESULT GetMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* out */ BMDSwitcherVideoMode* multiviewVideoMode) = 0;
    virtual HRESULT SetMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode multiviewVideoMode) = 0;
    virtual HRESULT DoesSupportMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode multiviewVideoMode, /* out */ bool* supported) = 0;
    virtual HRESULT Get3GSDIOutputLevel (/* out */ BMDSwitcher3GSDIOutputLevel* outputLevel) = 0;
    virtual HRESULT Set3GSDIOutputLevel (/* in */ BMDSwitcher3GSDIOutputLevel outputLevel) = 0;
    virtual HRESULT GetPowerStatus (/* out */ BMDSwitcherPowerStatus* powerStatus) = 0;
    virtual HRESULT GetTimeCode (/* out */ uint8_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames) = 0;
    virtual HRESULT SetTimeCode (/* in */ uint8_t hours, /* in */ uint8_t minutes, /* in */ uint8_t seconds, /* in */ uint8_t frames) = 0;
    virtual HRESULT RequestTimeCode (void) = 0;
    virtual HRESULT GetTimeCodeLocked (/* out */ bool* timeCodeLocked) = 0;
    virtual HRESULT GetAreOutputsConfigurable (/* out */ bool* configurable) = 0;
    virtual HRESULT GetSuperSourceCascade (/* out */ bool* cascade) = 0;
    virtual HRESULT SetSuperSourceCascade (/* in */ bool cascade) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcher_v8_0 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherDiscovery_v8_0 - Used to discover and connect to switchers */

class IBMDSwitcherDiscovery_v8_0 : public IUnknown
{
public:
    virtual HRESULT ConnectTo (/* in */ CFStringRef deviceAddress, /* out */ IBMDSwitcher_v8_0** switcherDevice, /* out */ BMDSwitcherConnectToFailure* failReason) = 0;

protected:
    virtual ~IBMDSwitcherDiscovery_v8_0 () {} // call Release method to drop reference count
};

/* Functions */

extern "C" {

    IBMDSwitcherDiscovery_v8_0* CreateBMDSwitcherDiscoveryInstance_v8_0 (void);

}

/* Interface IBMDSwitcherDownstreamKey_v8_0 - Downstream Key Object */

class BMD_PUBLIC IBMDSwitcherDownstreamKey_v8_0 : public IUnknown
{
public:
	virtual HRESULT GetInputCut (/* out */ BMDSwitcherInputId* input) = 0;
	virtual HRESULT SetInputCut (/* in */ BMDSwitcherInputId input) = 0;
	virtual HRESULT GetInputFill (/* out */ BMDSwitcherInputId* input) = 0;
	virtual HRESULT SetInputFill (/* in */ BMDSwitcherInputId input) = 0;
	virtual HRESULT GetCutInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* availabilityMask) = 0;
	virtual HRESULT GetFillInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* availabilityMask) = 0;
	virtual HRESULT GetTie (/* out */ bool* tie) = 0;
	virtual HRESULT SetTie (/* in */ bool tie) = 0;
	virtual HRESULT GetRate (/* out */ uint32_t* frames) = 0;
	virtual HRESULT SetRate (/* in */ uint32_t frames) = 0;
	virtual HRESULT GetOnAir (/* out */ bool* onAir) = 0;
	virtual HRESULT SetOnAir (/* in */ bool onAir) = 0;
	virtual HRESULT PerformAutoTransition (void) = 0;
	virtual HRESULT IsTransitioning (/* out */ bool* isTransitioning) = 0;
	virtual HRESULT IsAutoTransitioning (/* out */ bool* isAutoTransitioning) = 0;
	virtual HRESULT GetFramesRemaining (/* out */ uint32_t* framesRemaining) = 0;
	virtual HRESULT GetPreMultiplied (/* out */ bool* preMultiplied) = 0;
	virtual HRESULT SetPreMultiplied (/* in */ bool preMultiplied) = 0;
	virtual HRESULT GetClip (/* out */ double* clip) = 0;
	virtual HRESULT SetClip (/* in */ double clip) = 0;
	virtual HRESULT GetGain (/* out */ double* gain) = 0;
	virtual HRESULT SetGain (/* in */ double gain) = 0;
	virtual HRESULT GetInverse (/* out */ bool* inverse) = 0;
	virtual HRESULT SetInverse (/* in */ bool inverse) = 0;
	virtual HRESULT GetMasked (/* out */ bool* maskEnabled) = 0;
	virtual HRESULT SetMasked (/* in */ bool maskEnabled) = 0;
	virtual HRESULT GetMaskTop (/* out */ double* top) = 0;
	virtual HRESULT SetMaskTop (/* in */ double top) = 0;
	virtual HRESULT GetMaskBottom (/* out */ double* bottom) = 0;
	virtual HRESULT SetMaskBottom (/* in */ double bottom) = 0;
	virtual HRESULT GetMaskLeft (/* out */ double* left) = 0;
	virtual HRESULT SetMaskLeft (/* in */ double left) = 0;
	virtual HRESULT GetMaskRight (/* out */ double* right) = 0;
	virtual HRESULT SetMaskRight (/* in */ double right) = 0;
	virtual HRESULT ResetMask (void) = 0;
	virtual HRESULT AddCallback (/* in */ IBMDSwitcherDownstreamKeyCallback* callback) = 0;
	virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherDownstreamKeyCallback* callback) = 0;

protected:
	virtual ~IBMDSwitcherDownstreamKey_v8_0 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherDownstreamKeyIterator_v8_0 - Downstream Key Iterator */

class BMD_PUBLIC IBMDSwitcherDownstreamKeyIterator_v8_0 : public IUnknown
{
public:
	virtual HRESULT Next (/* out */ IBMDSwitcherDownstreamKey_v8_0** downstreamKey) = 0;

protected:
	virtual ~IBMDSwitcherDownstreamKeyIterator_v8_0 () {} // call Release method to drop reference count
};

#endif      // defined(__cplusplus)
#endif /* defined(BMD_BMDSWITCHERAPI_V8_0_H) */
