/* -LICENSE-START-
 ** Copyright (c) 2016 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#ifndef BMD_BMDSWITCHERAPI_V6_9_H
#define BMD_BMDSWITCHERAPI_V6_9_H


// Interface ID Declarations

BMD_CONST REFIID IID_IBMDSwitcherKeyFlyKeyFrameParameters_v6_9	= /* 8F3A7FA5-6B08-4999-B446-B64E9CFA3E37 */ {0x8F,0x3A,0x7F,0xA5,0x6B,0x08,0x49,0x99,0xB4,0x46,0xB6,0x4E,0x9C,0xFA,0x3E,0x37};
BMD_CONST REFIID IID_IBMDSwitcherKeyFlyParameters_v6_9			= /* 4CA84EC1-5A83-4A9D-A37A-72D32CDF1201 */ {0x4C,0xA8,0x4E,0xC1,0x5A,0x83,0x4A,0x9D,0xA3,0x7A,0x72,0xD3,0x2C,0xDF,0x12,0x01};
BMD_CONST REFIID IID_IBMDSwitcherTalkbackCallback_v6_9			= /* 0B90E45D-E976-45E1-A8A2-0ED4EF102E46 */ {0x0B,0x90,0xE4,0x5D,0xE9,0x76,0x45,0xE1,0xA8,0xA2,0x0E,0xD4,0xEF,0x10,0x2E,0x46};
BMD_CONST REFIID IID_IBMDSwitcherTalkback_v6_9					= /* 43E40D41-ADDC-43D2-871F-7BDB322E9BAA */ {0x43,0xE4,0x0D,0x41,0xAD,0xDC,0x43,0xD2,0x87,0x1F,0x7B,0xDB,0x32,0x2E,0x9B,0xAA};

#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcherKeyFlyKeyFrameParameters_v6_9;
class IBMDSwitcherKeyFlyParameters_v6_9;
class IBMDSwitcherTalkbackCallback_v6_9;
class IBMDSwitcherTalkback_v6_9;

/* Interface IBMDSwitcherKeyFlyKeyFrameParameters_v6_9 - Key Fly Frame Parameters */

class IBMDSwitcherKeyFlyKeyFrameParameters_v6_9 : public IUnknown
{
public:
    virtual HRESULT GetSizeX (/* out */ double* multiplierX) = 0;
    virtual HRESULT SetSizeX (/* in */ double multiplierX) = 0;
    virtual HRESULT GetSizeY (/* out */ double* multiplierY) = 0;
    virtual HRESULT SetSizeY (/* in */ double multiplierY) = 0;
    virtual HRESULT GetPositionX (/* out */ double* offsetX) = 0;
    virtual HRESULT SetPositionX (/* in */ double offsetX) = 0;
    virtual HRESULT GetPositionY (/* out */ double* offsetY) = 0;
    virtual HRESULT SetPositionY (/* in */ double offsetY) = 0;
    virtual HRESULT GetRotation (/* out */ double* degrees) = 0;
    virtual HRESULT SetRotation (/* in */ double degrees) = 0;
    virtual HRESULT GetCanRotate (/* out */ bool* canRotate) = 0;
    virtual HRESULT GetBorderWidthOut (/* out */ double* widthOut) = 0;
    virtual HRESULT SetBorderWidthOut (/* in */ double widthOut) = 0;
    virtual HRESULT GetBorderWidthIn (/* out */ double* widthIn) = 0;
    virtual HRESULT SetBorderWidthIn (/* in */ double widthIn) = 0;
    virtual HRESULT GetBorderSoftnessOut (/* out */ double* softOut) = 0;
    virtual HRESULT SetBorderSoftnessOut (/* in */ double softOut) = 0;
    virtual HRESULT GetBorderSoftnessIn (/* out */ double* softIn) = 0;
    virtual HRESULT SetBorderSoftnessIn (/* in */ double softIn) = 0;
    virtual HRESULT GetBorderBevelSoftness (/* out */ double* bevelSoft) = 0;
    virtual HRESULT SetBorderBevelSoftness (/* in */ double bevelSoft) = 0;
    virtual HRESULT GetBorderBevelPosition (/* out */ double* bevelPosition) = 0;
    virtual HRESULT SetBorderBevelPosition (/* in */ double bevelPosition) = 0;
    virtual HRESULT GetBorderOpacity (/* out */ double* opacity) = 0;
    virtual HRESULT SetBorderOpacity (/* in */ double opacity) = 0;
    virtual HRESULT GetBorderHue (/* out */ double* hue /* [0, 360) */) = 0;
    virtual HRESULT SetBorderHue (/* in */ double hue /* [0, 360) */) = 0;
    virtual HRESULT GetBorderSaturation (/* out */ double* sat) = 0;
    virtual HRESULT SetBorderSaturation (/* in */ double sat) = 0;
    virtual HRESULT GetBorderLuma (/* out */ double* luma) = 0;
    virtual HRESULT SetBorderLuma (/* in */ double luma) = 0;
    virtual HRESULT GetBorderLightSourceDirection (/* out */ double* degrees /* [0, 360) */) = 0;
    virtual HRESULT SetBorderLightSourceDirection (/* in */ double degrees /* [0, 360) */) = 0;
    virtual HRESULT GetBorderLightSourceAltitude (/* out */ double* altitude) = 0;
    virtual HRESULT SetBorderLightSourceAltitude (/* in */ double altitude) = 0;
    virtual HRESULT GetMaskTop (/* out */ double* top) = 0;
    virtual HRESULT SetMaskTop (/* in */ double top) = 0;
    virtual HRESULT GetMaskBottom (/* out */ double* bottom) = 0;
    virtual HRESULT SetMaskBottom (/* in */ double bottom) = 0;
    virtual HRESULT GetMaskLeft (/* out */ double* left) = 0;
    virtual HRESULT SetMaskLeft (/* in */ double left) = 0;
    virtual HRESULT GetMaskRight (/* out */ double* right) = 0;
    virtual HRESULT SetMaskRight (/* in */ double right) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherKeyFlyKeyFrameParameters_v6_9 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyFlyParameters_v6_9 - Key Fly Parameters */

class IBMDSwitcherKeyFlyParameters_v6_9 : public IUnknown
{
public:
    virtual HRESULT GetFly (/* out */ bool* isFlyKey) = 0;
    virtual HRESULT SetFly (/* in */ bool isFlyKey) = 0;
    virtual HRESULT GetCanFly (/* out */ bool* canFly) = 0;
    virtual HRESULT GetRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetSizeX (/* out */ double* multiplierX) = 0;
    virtual HRESULT SetSizeX (/* in */ double multiplierX) = 0;
    virtual HRESULT GetSizeY (/* out */ double* multiplierY) = 0;
    virtual HRESULT SetSizeY (/* in */ double multiplierY) = 0;
    virtual HRESULT GetPositionX (/* out */ double* offsetX) = 0;
    virtual HRESULT SetPositionX (/* in */ double offsetX) = 0;
    virtual HRESULT GetPositionY (/* out */ double* offsetY) = 0;
    virtual HRESULT SetPositionY (/* in */ double offsetY) = 0;
    virtual HRESULT GetRotation (/* out */ double* degrees) = 0;
    virtual HRESULT SetRotation (/* in */ double degrees) = 0;
    virtual HRESULT GetCanRotate (/* out */ bool* canRotate) = 0;
    virtual HRESULT ResetRotation (void) = 0;
    virtual HRESULT ResetDVE (void) = 0; // Resets all DVE parameters, excluding mask
    virtual HRESULT ResetDVEFull (void) = 0; // Resets all DVE parameters to full screen, excluding mask
    virtual HRESULT IsKeyFrameStored (/* in */ BMDSwitcherFlyKeyFrame keyFrame, /* out */ bool* stored) = 0;
    virtual HRESULT StoreAsKeyFrame (/* in */ BMDSwitcherFlyKeyFrame keyFrame) = 0; // Stores current state into the specified Key Frame(s), only Key Frame A and/or B can be specified.
    virtual HRESULT ClearKeyFrame (/* in */ BMDSwitcherFlyKeyFrame keyFrame) = 0; // Clears the specified Key Frame(s), only Key Frame A and/or B can be specified.
    virtual HRESULT RunToKeyFrame (/* in */ BMDSwitcherFlyKeyFrame destination) = 0; // Can only specify 1 Key Frame destination
    virtual HRESULT IsAtKeyFrames (/* out */ BMDSwitcherFlyKeyFrame* keyFrames) = 0;
    virtual HRESULT GetKeyFrameParameters (/* in */ BMDSwitcherFlyKeyFrame keyFrame, /* out */ IBMDSwitcherKeyFlyKeyFrameParameters_v6_9** keyFrameParameters) = 0;
    virtual HRESULT IsRunning (/* out */ bool* isRunning, /* out */ BMDSwitcherFlyKeyFrame* destination) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyFlyParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyFlyParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherKeyFlyParameters_v6_9 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTalkbackCallback_v6_9 - Talkback Object Callback */

class IBMDSwitcherTalkbackCallback_v6_9 : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherTalkbackEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherTalkbackCallback_v6_9 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTalkback_v6_9 - Talkback Object */

class IBMDSwitcherTalkback_v6_9 : public IUnknown
{
public:
    virtual HRESULT GetMuteSDI (/* out */ bool* muteSDI) = 0;
    virtual HRESULT SetMuteSDI (/* in */ bool muteSDI) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherTalkbackCallback_v6_9* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherTalkbackCallback_v6_9* callback) = 0;

protected:
    virtual ~IBMDSwitcherTalkback_v6_9 () {} // call Release method to drop reference count
};

#endif	// defined(__cplusplus)
#endif	/* defined(BMD_BMDSWITCHERAPI_V6_9_H) */
