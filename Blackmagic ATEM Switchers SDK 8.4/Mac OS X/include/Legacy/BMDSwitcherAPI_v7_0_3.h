/* -LICENSE-START-
** Copyright (c) 2017 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#ifndef BMD_BMDSWITCHERAPI_V7_0_3_H
#define BMD_BMDSWITCHERAPI_V7_0_3_H

#include "BMDSwitcherAPI.h"

// Interface ID Declarations

BMD_CONST REFIID IID_IBMDSwitcherCameraControl_v7_0_3             = /* 95D7C0B6-9A84-4715-BE27-8A9CCAA9E6A9 */ {0x95,0xD7,0xC0,0xB6,0x9A,0x84,0x47,0x15,0xBE,0x27,0x8A,0x9C,0xCA,0xA9,0xE6,0xA9};

#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcherCameraControl_v7_0_3;

/* Interface IBMDSwitcherCameraControl - Switcher Camera Control Object */

class IBMDSwitcherCameraControl_v7_0_3 : public IUnknown
{
public:
	virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
	virtual HRESULT GetPeriodicFlushInterval (/* out */ uint32_t* intervalMs /* In milliseconds */) = 0;
	virtual HRESULT SetPeriodicFlushInterval (/* in */ uint32_t intervalMs /* In milliseconds */) = 0;
	virtual HRESULT GetParameterInfo (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* out */ BMDSwitcherCameraControlParameterType* type, /* out */ uint32_t* count) = 0;
	virtual HRESULT GetParameterPeriodicFlushEnabled (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* out */ bool* enabled) = 0;
	virtual HRESULT SetParameterPeriodicFlushEnabled (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ bool enabled) = 0;
	virtual HRESULT SetFlags (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const bool* values) = 0;
	virtual HRESULT ToggleFlags (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const bool* values) = 0;
	virtual HRESULT GetFlags (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in, out */ uint32_t* count, /* out */ bool* values) = 0;
	virtual HRESULT SetBytes (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int8_t* bytes) = 0;
	virtual HRESULT OffsetBytes (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int8_t* bytes) = 0;
	virtual HRESULT GetBytes (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in, out */ uint32_t* count, /* out */ int8_t* bytes) = 0;
	virtual HRESULT SetInt16s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int16_t* values) = 0;
	virtual HRESULT OffsetInt16s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int16_t* values) = 0;
	virtual HRESULT GetInt16s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in, out */ uint32_t* count, /* out */ int16_t* values) = 0;
	virtual HRESULT SetInt32s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int32_t* values) = 0;
	virtual HRESULT OffsetInt32s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int32_t* values) = 0;
	virtual HRESULT GetInt32s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in, out */ uint32_t* count, /* out */ int32_t* values) = 0;
	virtual HRESULT SetInt64s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int64_t* values) = 0;
	virtual HRESULT OffsetInt64s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int64_t* values) = 0;
	virtual HRESULT GetInt64s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in, out */ uint32_t* count, /* out */ int64_t* values) = 0;
	virtual HRESULT OffsetFloats (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const double* values) = 0;
	virtual HRESULT SetFloats (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const double* values) = 0;
	virtual HRESULT GetFloats (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in, out */ uint32_t* count, /* out */ double* values) = 0;
	virtual HRESULT AddCallback (/* in */ IBMDSwitcherCameraControlCallback* callback) = 0;
	virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherCameraControlCallback* callback) = 0;

protected:
	virtual ~IBMDSwitcherCameraControl_v7_0_3 () {} // call Release method to drop reference count
};

#endif      // defined(__cplusplus)
#endif /* BMD_BMDSWITCHERAPI_V7_0_3_H */
