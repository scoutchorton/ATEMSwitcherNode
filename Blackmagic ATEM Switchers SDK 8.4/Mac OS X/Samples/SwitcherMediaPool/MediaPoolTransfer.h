/* -LICENSE-START-
** Copyright (c) 2012 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#import "SwitcherMediaPoolAppDelegate.h"
#include "BMDSwitcherAPI.h"
#include <list>
#include <string>

// This file contains the StillTransfer and ClipTransfer classes which assist in uploading stills and clips to the switcher.
// Downloading is outside of the scope of this example application, however downloading is very similar to uploading.

class LockCallback;

// The MediaPoolTransfer class provides common functionality to the StillTransfer and ClipTransfer class.
class MediaPoolTransfer
{
// this class is a base class so all of its members are protected
protected:
	MediaPoolTransfer(NSWindow* window, IBMDSwitcher* switcher, IBMDSwitcherMediaPool* mediaPool);
	virtual ~MediaPoolTransfer();
	
	IBMDSwitcherFrame*				loadFrame(std::string filePath); // loads a frame from file
	std::string						fileNameFromFilePath(const std::string& filePath); // gets a file name from a file path

	NSWindow*						mWindow; // window for showing message boxes

	// interfaces
	IBMDSwitcher*					mSwitcher;
	IBMDSwitcherMediaPool*			mMediaPool;
};

// The StillTransfer class assists in uploading stills to the switcher.
// The app delegate passes events received from the Stills and Lock callbacks to StillTransfer.
class StillTransfer : private MediaPoolTransfer
{
public:
	StillTransfer(SwitcherMediaPoolAppDelegate* uiDelegate, NSWindow* window, IBMDSwitcher* switcher, IBMDSwitcherMediaPool* mediaPool, IBMDSwitcherStills* stills);
	~StillTransfer();

	// this example demonstrates uploading only, however downloading is very similar
	bool upload(int stillIndex, std::string filePath);

	// the app delegate reports back to us via the following methods
	void onLockObtained();
	void onTransferEnded(bool success);

private:
	IBMDSwitcherStills*		mStills; // still interface
	LockCallback*			mLockCallback; // callback to tell us when lock is obtained

	// transfer properties
	bool					mTransferActive;		// true if a transfer is being processed
	int						mTransferStillIndex;	// target still index
	std::string				mTransferName;			// target still name
	IBMDSwitcherFrame*		mTransferFrame;			// frame to transfer
};

// The ClipTransfer class assists in uploading clips to the switcher.
// The app delegate passes events received from the Clip and Lock callbacks to ClipTransfer.
class ClipTransfer : private MediaPoolTransfer
{
public:
	ClipTransfer(SwitcherMediaPoolAppDelegate* uiDelegate, NSWindow* window, IBMDSwitcher* switcher, IBMDSwitcherMediaPool* mediaPool, IBMDSwitcherClip* clip);
	~ClipTransfer();

	// this example demonstrates uploading a series of images only, however downloading is very similar
	bool upload(const std::list<std::string>& filePaths);

	// the app delegate reports back to us via the following methods
	void onLockObtained();
	bool onTransferEnded(bool success); // returns true if the clip transfer has ended for any reason

private:
	// loads the next frame so that it is ready to upload
	bool					prepareNextFrame(); // returns true if successful

	// upload next frame if there are more frames to upload, otherwise end the transfer
	bool					uploadNextFrame();

	IBMDSwitcherClip*		mClip; // clip interface
	LockCallback*			mLockCallback; // callback to tell us when lock is obtained

	// transfer properties
	bool					mTransferActive;		// true if a transfer is being processed
	std::list<std::string>	mTransferFilePaths;		// list of unfinished files to upload
	std::string				mTransferName;			// target clip name
	IBMDSwitcherFrame*		mTransferFrame;			// frame to transfer
	int						mTransferredFrameCount;	// number of transferred frames
};
